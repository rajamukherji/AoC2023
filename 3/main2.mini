let Input := file(Args[1], "r")

let UsedGears := {}

var LastParts := []
var LastGears := set()
var Row := 0
var Gear := 0

loop
	let Line := while Input:read
	Row := old + 1
	var A, B
	let CurrentParts := []
	let CurrentGears := {}
	for I, C in Line do
		switch C: string
		case r"[0-9]" do
			A := old or I
			B := I
		case "*" do
			CurrentGears[I] := (Gear := old + 1)
			if A then
				CurrentParts:put((A, B, integer(Line[A, B + 1]), Row))
				A := B := nil
			end
			A := B := nil
		else
			if A then
				CurrentParts:put((A, B, integer(Line[A, B + 1]), Row))
				A := B := nil
			end
		end
	end
	print('{Row} -> {CurrentParts}\n')
	print('{Row} -> {CurrentGears}\n\n\n\n')
	for Part in LastParts do
		for I in (Part[1] - 1) .. (Part[2] + 1) do
			if let Gear := CurrentGears[I] then
				UsedGears[Gear, /set]:insert(Part)
			end
		end
	end
	for Part in CurrentParts do
		for I in (Part[1] - 1) .. (Part[2] + 1) do
			if let Gear := LastGears[I] or CurrentGears[I] then
				UsedGears[Gear, /set]:insert(Part)
			end
		end
	end
	LastParts := CurrentParts
	LastGears := CurrentGears
end

print('UsedGears = {UsedGears}\n')
print('Sum = {sum(UsedGears ->? (fun(X) X:count = 2) -> prod(_, _[3]))}\n')
