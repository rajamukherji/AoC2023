meth +(A: tuple[integer, integer], B: tuple[integer, integer]) (A[1] + B[1], A[2] + B[2])
meth -(A: tuple[integer, integer], B: tuple[integer, integer]) (A[1] - B[1], A[2] - B[2])

let Input := file(Args[1], "r")
let Lines := list(seq Input:read{it != "\n"}:trim)
let Grid := array(list(Lines, list))

let (H, W) := Grid:shape
for X in Grid do X := (X, set()) end

fun energize(Start, Dir) do
	for X in Grid do X[2]:empty end
	let Queue := [(Start, Dir)]
	loop
		var (Pos, Dir) := while Queue:pop
		loop
			let (P, Y) := Grid[Pos] or exit
			Y:missing(Dir) or exit
			switch P: string
			case "." do
				Pos := old + Dir
			case "|" do
				if Dir[2] = 0 then
					Pos := old + Dir
				else
					Queue:put((Pos + ((1, 0)), (1, 0)))
					Queue:put((Pos + ((-1, 0)), (-1, 0)))
					exit
				end
			case "-" do
				if Dir[1] = 0 then
					Pos := old + Dir
				else
					Queue:put((Pos + ((0, -1)), (0, -1)))
					Queue:put((Pos + ((0, 1)), (0, 1)))
					exit
				end
			case "/" do
				Dir := (-Dir[2], -Dir[1])
				Pos := old + Dir
			case "\\" do
				Dir := (Dir[2], Dir[1])
				Pos := old + Dir
			end
		end
	end
	count(Grid ->? fun(X) X[2]:size > 0)
end

print(max(
	(energize((Y, 1), (0, 1)) for Y in 1 .. H) &
	(energize((Y, W), (0, -1)) for Y in 1 .. H) &
	(energize((1, X), (1, 0)) for X in 1 .. W) &
	(energize((H, X), (-1, 0)) for X in 1 .. W)
))

:>for I in 1 .. H do print(Grid[I], "\n") end

:>print(energize((1, 1), (0, 1)))
