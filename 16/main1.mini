let Input := file(Args[1], "r")
let Lines := list(seq Input:read{it != "\n"}:trim)
let Grid := array(list(Lines, list))

let (H, W) := Grid:shape

for I in 1 .. H do print(Grid[I], "\n") end

for X in Grid do X := (X, set()) end

let Queue := [((1, 1), (0, 1))]

meth +(A: tuple[integer, integer], B: tuple[integer, integer]) (A[1] + B[1], A[2] + B[2])
meth -(A: tuple[integer, integer], B: tuple[integer, integer]) (A[1] - B[1], A[2] - B[2])

fun trace(var Pos, var Dir) do
	loop
		let (P, Y) := Grid[Pos] or ret
		Y:missing(Dir) or ret
		switch P: string
		case "." do
			Pos := old + Dir
		case "|" do
			if Dir[2] = 0 then
				Pos := old + Dir
			else
				Queue:put((Pos + ((1, 0)), (1, 0)))
				Queue:put((Pos + ((-1, 0)), (-1, 0)))
				ret
			end
		case "-" do
			if Dir[1] = 0 then
				Pos := old + Dir
			else
				Queue:put((Pos + ((0, -1)), (0, -1)))
				Queue:put((Pos + ((0, 1)), (0, 1)))
				ret
			end
		case "/" do
			Dir := (-Dir[2], -Dir[1])
			Pos := old + Dir
		case "\\" do
			Dir := (Dir[2], Dir[1])
			Pos := old + Dir
		end
	end
end

loop
	let (Pos, Dir) := while Queue:pop
	trace(Pos, Dir)
end

for I in 1 .. H do print(Grid[I], "\n") end

print(count(Grid ->? fun(X) X[2]:size > 0))
